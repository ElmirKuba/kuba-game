/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ElmirKuba
 * –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: backend-—á–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ KubaGame
 */

import { Logger, ValidationPipe } from '@nestjs/common';
import { HttpAdapterHost, NestFactory } from '@nestjs/core';
import { AppModule } from './app/app.module';
import { ApiExceptionFilter, exceptionFactoryHandler } from '@backend/filters';
import cookieParser from 'cookie-parser';

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ NestJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @returns {Promise<void>}
 */
async function bootstrap() {
  /** –°–æ–∑–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä NestJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
  const app = await NestFactory.create(AppModule, {
    cors: {
      origin: '*',
      credentials: true,
      methods: ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE', 'OPTIONS'],
    },
  });

  /** –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å REST-API */
  const globalPrefix = 'api';

  app
    .setGlobalPrefix(globalPrefix)
    .use(cookieParser())
    .useGlobalPipes(
      new ValidationPipe({
        whitelist: true,
        forbidNonWhitelisted: true,
        transform: true,
        stopAtFirstError: false,
        exceptionFactory: exceptionFactoryHandler,
      })
    )
    .useGlobalFilters(new ApiExceptionFilter(app.get(HttpAdapterHost)));

  /** –ü–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–Ω–∏–º–∞–µ—Ç REST-API */
  const port = process.env.PORT || 3000;

  await app.listen(port);

  Logger.log(
    `üöÄ NestJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏ —Å–ª—É—à–∞–µ—Ç REST-API: http://localhost:${port}/${globalPrefix}`
  );
}

bootstrap();
