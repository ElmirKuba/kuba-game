services:
  # Сервис СуБД MySQL
  mysql_kubagame_dev: # Наименование сервиса Docker
    container_name: mysql_kubagame_dev # Наименование контейнера Docker
    image: mysql:5.6.51 # Последняя версия СуБД MySQL которая работает с SAMP/OMP серверами
    restart: unless-stopped # Если оборудование где запущены докер контейнеры упало, то Docker после запуска системы посмотрит и поднимет только в случае если контейнер работал до подения
    platform: linux/amd64 # Для корректной работы на arm системах надо явно указать линковку 64 бит
    environment: # Переменные среды внутри контейнера mysql_kubagame_dev
      - MYSQL_DATABASE=mysql_kubagame_dev # Прокидываем наименование базы данных в СуБД MySQL
      - MYSQL_USER=${MYSQL_USER} # Прокидываем логин пользователя в переменные среды контейнера Docker для того чтобы пользователь смог использовать СуБД MySQL
      - MYSQL_PASSWORD=${MYSQL_PASSWORD} # Прокидываем пароль пользователя в переменные среды контейнера Docker для того чтобы пользователь смог использовать СуБД MySQL
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} # Прокидываем ROOT пароль в переменные среды контейнера Docker для корректной работы СуБД MySQL из .env файла
    volumes: # Тома для обмена данными хостовой машины и операционной системой внутри Docker контейнера
      - ./../sql-files/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./../sql-files/init.sql:/docker-entrypoint-initdb.d/init.sql:ro # При первичной инициализации возьмет файл init.sql и на основе него создаст таблицы в базе данных СуБД MySQL
      - ./../volumes/db_data:/var/lib/mysql # Сохранит прогресс работы СуБД MySQL вне контейнера Docker
    expose: # Объявление для Docker о необходимых портах внутри контейнера Docker
      - ${MYSQL_PORT}
    ports: # Прокидывание портов наружу из контейнера Docker
      - ${MYSQL_PORT}:${MYSQL_PORT}
    networks: # Сети в которых этот контейнер Docker смогут находить другие контейнеры Docker
      - network_kubagame_project
  # Сервис СуБД MySQL

  # Сервис phpMyAdmin
  pma_kubagame_dev: # Наименование сервиса Docker
    container_name: pma_kubagame_dev # Наименование контейнера Docker
    image: phpmyadmin # Любой latest image
    restart: unless-stopped # Если оборудование где запущены докер контейнеры упало, то Docker после запуска системы посмотрит и поднимет только в случае если контейнер работал до подения
    platform: linux/amd64 # Для корректной работы на arm системах надо явно указать линковку 64 бит
    environment: # Переменные среды внутри контейнера pma_kubagame_dev
      - PMA_ARBITRARY=0 # when set to 1 connection to the arbitrary server will be allowed
      - PMA_HOST=mysql_kubagame_dev # Здесь указываем через "=" наименование контейнера-сервиса Docker для СуБД MySQL
      - PMA_PORT=${MYSQL_PORT} # Здесь указываем переменную порта работы СуБД MySQL контейнера Docker из .env
    expose: # Объявление для Docker о необходимых портах внутри контейнера Docker
      - ${PMA_INTERNAL_PORT}
    ports: # Прокидывание портов наружу из контейнера Docker
      - ${PMA_EXTERNAL_PORT}:${PMA_INTERNAL_PORT}
    networks: # Сети в которых этот контейнер Docker смогут находить другие контейнеры Docker
      - network_kubagame_project
    depends_on: # Заставляем контейнер phpMyAdmin ждать перечисленные контейнеры
      - mysql_kubagame_dev
  # Сервис phpMyAdmin

  # Сервис Backend-части проекта
  nestbackend_kubagame_dev: # Наименование сервиса Docker
    container_name: nestbackend_kubagame_dev # Наименование контейнера Docker
    build: # Правила сборки сервиса Docker
      context: ./../../ # Указываем что контекст проекта находится на два уровня выше а не в папке docker/compose-files, то есть в корне репозитория в целом
      dockerfile: ./docker/dockerfiles/nest-backend/Dockerfile.dev # Указываем путь для сборки Docker контейнера (так как это наш самописный docker image)
    platform: linux/amd64 # Для корректной работы на arm системах надо явно указать линковку 64 бит
    restart: unless-stopped # Если оборудование где запущены докер контейнеры упало, то Docker после запуска системы посмотрит и поднимет только в случае если контейнер работал до подения
    environment: # Переменные среды внутри контейнера nestbackend_kubagame_dev
      - CHOKIDAR_USEPOLLING=true
      - MYSQL_HOST_AND_NAME_DATABASE=mysql_kubagame_dev
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - ACCESS_KEY_JWT=${ACCESS_KEY_JWT}
      - ACCESS_TOKEN_LIFETIME=${ACCESS_TOKEN_LIFETIME}
      - REFRESH_KEY_JWT=${REFRESH_KEY_JWT}
      - REFRESH_TOKEN_LIFETIME=${REFRESH_TOKEN_LIFETIME}
    volumes: # Тома для обмена данными хостовой машины и операционной системой внутри Docker контейнера
      - ./../../nest-backend/src:/nest-backend/src:rw
      # TODO: ElmirKuba 2025-07-28: Расскоментировать строку ниже когда потребуется создаваемые backend частью проекта файлы сохранять между перезапусками контейнеров отдавая их на хостовую машину
      # - ./../../nest-backend/uploads:/nest-backend/uploads:rw
    command: sh -c "sleep 30s && npm run start:debug --verbose" # Команда которая поднимет через 30 секунд само приложение nest-backend внутри docker контейнера
    expose: # Объявление для Docker о необходимых портах внутри контейнера Docker
      - ${BACKEND_PORT}
    ports: # Прокидывание портов наружу из контейнера Docker
      - ${BACKEND_PORT}:${BACKEND_PORT}
    networks: # Сети в которых этот контейнер Docker смогут находить другие контейнеры Docker
      - network_kubagame_project
    depends_on: # Заставляем контейнер phpMyAdmin ждать перечисленные контейнеры
      - pma_kubagame_dev
      - mysql_kubagame_dev
  # Сервис Backend-части проекта

# Сети Docker Compose
networks:
  # Сеть Docker Compose продукта для разработки
  network_kubagame_project:
    name: network_kubagame_project
    external: true # Указываем что сеть с таким именем потребуется создавать вручную (явный контроль)
    # network network_kubagame_project declared as external, but could not be found
    # Исп.: docker network create network_kubagame_project
